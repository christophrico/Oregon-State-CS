# Assignment 1: Matrix Math!
# Christopher Rico
# CS344
# OSU ID: 933239746

#!/bin/bash

###########################################################################
# dims
# calculates and prints out the dimensions of a Matrix
###########################################################################
function dims()
{
	# calculate the number of rows and columns in the file
	rowNum=$(wc -l < $1)
	colNum=$(($(head -n 1 "$1" | grep -o $'\t' | wc -l)+1))

	#print the row and column counts
  echo "$rowNum $colNum"

  return 0
}

###########################################################################
# transpose
# takes matrix and transposes along main axis
###########################################################################
function transpose()
{
  # get number of \t characters in one row and add 1 to calculate the number of columns
  colNum=$(($(head -n 1 "$1" | grep -o $'\t' | wc -l)+1))

  # cut each column one at a time and paste as a single line
  for (( i=1; i<="$colNum"; i++ ))
  do
    cut -f"$i" "$1" | paste -s
  done

  return 0
}

###########################################################################
# mean
# calculate column means for a matrix
###########################################################################
function mean()
{
  #transpose the matrix and save to temp file to make it easier to just read row by row
  MEANTMP="tempFile$$"
  transpose $1 > $MEANTMP
  trap "{ clean }" INT HUP TERM

	#get the number of rows in the file
	rowNum=$(wc -l < $MEANTMP)
	count=0

  #pull one row into array at a time
  while read -a rows
  do
    rowSum=0
    colNum=0
    rowAverage=0
    #get sum total of values in row, and count total number of elements in row
    for i in "${rows[@]}"
    do
      ((rowSum += i))
      ((colNum++))
    done

		((count++))

    #calculate average of values in row and print to screen
    echo -n $(( rowAverage = (rowSum + (colNum/2) * ( ( rowSum > 0 ) * 2 - 1 )) / colNum ))

		#add a tab behind every value
		#unless it is the final value, then add a newline
		if [ $count -eq $rowNum ]
		then
			echo
		else
			echo -ne "\t"
		fi

  done < $MEANTMP

  return 0
}

###########################################################################
# add
# calculate sum of two matrices and prints to screen
###########################################################################
function add()
{
  # read row-by-row simultaneously from each matrix
  while read -a rows1 <&3 && read -a rows2 <&4
  do

		#for the number of elements in the row
    for ((i=0; i<${#rows1[@]}; i++))
    do
			#sum the two numbers at the same index
      value=$(expr "${rows1[i]}" + "${rows2[i]}")
			((count = i + 1))

			#print the sum
			echo -n "$value"

			#if the value is the last in the row, add a newline
			if [ $count -eq ${#rows1[@]} ]
			then
				 echo
			#otherwise, add a tab
			else
				echo -ne "\t"
			fi
    done

  done 3<$1 4<$2

  return 0
}

###########################################################################
# multiply
# calculate product of two matrices and prints to screen
###########################################################################
function multiply
{
	#transpose the second matrix and save it to a temp file
	MULTMP="tempFile$$"
	transpose $2 > $MULTMP
	trap "{ clean }" INT HUP TERM

	#get number of elements per line in second matrix.
	#this is used to properly format output
	lines=$(wc -l < $MULTMP)

#get one row from the first matrix
 while read -a rows1
 do
	 count=1
	 #loop over all rows in second matrix for every one row of first matrix
	 while read -a rows2
	 do
		 # multiply each corresponding index together and add to accumulator
		 # to calclulate dot product of line
		 value=0
		 accum=0
		 for ((i=0; i<${#rows1[@]}; i++))
		 do
			accum=$(expr "${rows1[i]}" \* "${rows2[i]}")
			((value += accum))
		 done

		 #print the value
		 echo -n "$value"

		 #if the value is the last in the row, add a newline
		 if [ $count -eq $lines ]
		 then
			 echo
		 #otherwise, add a tab
		 else
			 echo -ne "\t"
		 fi
		 ((count++))
	 done < $MULTMP

 done < $1

 return 0
}

###########################################################################
# matrixVal
#    -validates user input:
# 	 -checks that arguments are valid
#		 -if input is needed from stdin
#		 -that if user wants add, matrices are same size
#		 -that if user wants multiply, matrices are compatible
#	   -otherwise outputs to stderr
###########################################################################
function matrixVal()
{
  #if user wants a function that only requires one matrix
  if [ $1 == "dims" ] || [ $1 == "transpose" ] || [ $1 == "mean" ]
  then
    # if we need to snag input from stdin
    if [ $# -eq 1 ]
    then
      #create temp file
      TMP="inputFile$$"
      trap "{ clean }" INT HUP TERM

      # capture input from stdin in temp file, call function
      echo "$(</dev/stdin)" > $TMP
      "$1" $TMP
      clean
      return 0

    # if user supplied file in cmd line arg, validate file and call function
	elif [ -r $2 ] && [ $# -eq 2 ]
    then
      "$1" $2
      clean
      return 0

    else
      echo "Invalid file or number of arguments.">&2
      return 1
    fi



  #if user wants add
  elif [ $1 == "add" ]
  then
		#if user passed in the correct number of arguments
		if [ $# -eq 3 ] && [ -r $2 ] && [ -r $3 ]
		then
			#get the dimensions of each file
			rowNum1=$(wc -l < $2)
			colNum1=$(($(head -n 1 "$2" | grep -o $'\t' | wc -l)+1))
			rowNum2=$(wc -l < $3)
			colNum2=$(($(head -n 1 "$3" | grep -o $'\t' | wc -l)+1))

			#check that they are identical in dimension
			if [ $rowNum1 -eq $rowNum2 ] && [ $colNum1 -eq $colNum2 ]
			then
		    # if so, call the appropriate function
		    "$1" $2 $3
		    return 0

			else
				echo "These matrices are not the same size!">&2
				return 1
			fi

    else
      echo "Invalid files or number of arguments.">&2
      return 1
    fi



  #if user wants multiply
	elif [ $1 == "multiply" ]
	then
		#and user has passed in the correct number of arguments and 2 readable files
		if [ $# -eq 3 ] && [ -r $2 ] && [ -r $3 ]
		then
			#check to see that matrix 1 has the same number of rows as matrix 2 has columns
			rowNum1=$(wc -l < $3)
			colNum2=$(($(head -n 1 "$2" | grep -o $'\t' | wc -l)+1))

			#if the matrices are compatible, go call multiply!
			if [ $rowNum1 -eq $colNum2 ]
			then
				"$1" $2 $3
				clean
				return 0

			# if they're not compatible, tell the user
			else
				echo "These matrices are not the correct size!">&2
				clean
				return 1
			fi

		else
			echo "Invalid files or number of arguments.">&2
			return 1
		fi



  # otherwise the user entered nonsense. Tell them and return with error code
  else
    echo "That function does not exist.">&2
    return 1
  fi
}

###########################################################################
# Clean
# cleans up all temp files after script finishes executing
###########################################################################
function clean()
{
  rm -f tempFile*
  rm -f inputFile*
	return 0
}

###########################################################################
# MAIN
# send user-input arguments to validation function
###########################################################################

matrixVal $@
